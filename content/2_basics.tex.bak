\chapter{Grundlagen}\label{ch:basics}
In diesem Kapitel werden die für diese Arbeit notwendigen Grundlagen aufgezeigt.
Diese sollen für ein einheitliches Verständnis des Themas sorgen und unterschiedliche Vorstellungen von Fachbegriffen angleichen.

Generell lassen sich mobile Anwendungen in drei Kategorien einteilen: Native, Hybrid und Web Applikationen.
Im Folgenden wird einerseits genauer auf Native und Hybride Applikationen und anderseits auf eine spezielle Form von Web Apps, genannt \acp{pwa}, eingegangen.

\section{Native Applikationen}
Als native Applikationen werden Anwendungen bezeichnet, die plattformspezifisch -- ergo speziell für ein Betriebssystem -- implementiert sind.
Das wird dadurch ermöglicht, dass sie mit dem \ac{sdk} des Plattformherstellers entwickelt werden und somit kompletten Zugriff auf jegliche Funktionalitäten der Geräte besitzen.
Außerdem entsteht durch Verwendung der plattformspezifischen UI-Komponenten\footnote{User Interface Komponenten, z. Dt. Benutzeroberflächenkomponenten}, sogenannten Views, eine einheitliche Benutzerschnittstelle, die sich in allen Anwendungen des Betriebssystems widerspiegelt.
Um solche Apps mit ihren \acp{sdk} zu entwickeln, wird die zur \ac{sdk} zugehörige Programmiersprache verwendet.
Die bekanntesten Programmiersprachen sind Java oder Kotlin für Android Geräte, Objective-C und Swift für iOS. \cite{Jobe.2013}.
Eine aktuelle Statistik von \textit{Statcounter} macht deutlich, dass die am meisten verbreiteten Betriebssysteme Android und iOS sind, weswegen im Verlauf dieser Arbeit ausschließlich auf ebendiese eingegangen wird \cite{o.V..2021b}.

Um Applikationen im jeweiligen App-Store veröffentlichen zu können, müssen diese eindeutig identifizierbar sein.
Das erfolgt durch den Prozess der sogenannten Signierung, der ebenfalls plattformabhängig durchgeführt wird.\\
Eine App kann nach der Signierung und Überprüfung nur durch eine Aktualisierung verändert (\zB Update oder Bugfix) werden.
Deshalb folgt auf eine Aktualisierung auch eine erneute Überprüfung und Veröffentlichung der App.\\
%Danach wird die App teilweise manuell überprüft, bevor sie letztendlich im App-Store publiziert wird.
%Wichtig ist hierbei, dass sich die App, nach jener Überprüfung nicht mehr ändern darf.
%Dies ist erst wieder durch eine offizielle Aktualisierung möglich, welche wiederum den Überprüfungsprozess durchlaufen muss.\\
Ferner können Android Apps auch in ihrer Rohfassung auf Android Geräten installiert werden.
Hierfür muss der Entwicklermodus aktiviert und das \ac{apk}\footnote{Plattformspezifische Sammlung von Dateien, die wie Quellcode und Ressourcen für die Installation und Nutzung der App beinhaltet} auf das Endgerät geladen werden.
Das Äquivalent in iOS ist die \ac{ipa}-Datei.

\section{Cross-platform Applikationen}
Unter cross-platform (z.\,Dt. plattformunabhängig) Applikationen versteht man Anwendungen, die auf einer Code-Basis aufbauen und zur Laufzeit zu mehreren Anwendungen für unterschiedliche Endgeräte kompiliert werden.
%Außerdem können sie in herkömmlichen Quelltext-Editoren entwickelt werden, da sie im Gegensatz zu nativen Anwendungen unabhängig von bestimmten Betriebssystemen oder SDKs sind.
Der Vorteil solcher Applikationen ist, dass sie, obwohl sie auf demselben Code basieren, sich komplett den plattformspezifischen Stil anpassen.
Somit verringern sich auch die Entwicklungskosten, die bei Implementierung von jeweils einer Anwendung pro Betriebssystem anfallen würden.
Klar abzugrenzen sind plattformunabhängige Anwendungen von hybriden Anwendungen.
Denn das Endprodukt bei letzterem ist eine Web Applikation, die sich durch eine WebView in einem nativen Container dem Kontext (\zB Betriebssystem, Auflösung) des Geräts, in dem sie aufgerufen wird, anpasst \cite{Schickler.2015}.

Gängige Frameworks zur plattformunabhängigen Entwicklung sind Electron, Ionic und React Native \cite{o.V..2020}.
Diese stellen meist eine begrenzte Anzahl an vorprogrammierten UI-Komponenten und Funktionalitäten zur Verfügung.
Es gibt außerdem eine Vielzahl von Community Lösungen, die für wiederkehrende Anforderungen Lösungen bieten.

\section{Progressive Web Apps}
\acp{pwa} sind in erster Linie Web Applikationen, also Anwendungen, die mit den üblichen Web Technologien wie HTML, CSS und ECMAScript (JavaScript) implementiert sind.
Laut Mozilla Developer Network zeichnen sie sich dadurch aus, dass zusätzlich folgende technische Voraussetzungen erfüllt sind: Sie müssen auf einer sicheren Verbindung aufbauen, eine oder mehrere Service Worker besitzen und über ein App Manifest verfügen \cite{MDNcontributors.}.
Ersteres wird gewährleistet durch eine \ac{https} Verbindung, während Service Worker JavaScript-Skripte sind, die im Hintergrund auf dem Client und unabhängig von der Anwendung selbst ausgeführt werden \cite{Gaunt.}.
Sie sind die wichtigste Komponente hinter den meisten Funktionalitäten, die eine \ac{pwa} bietet, weswegen im Laufe dieses Kapitels genauer auf ebendiese eingegangen wird. Die letzte benötigte Komponente ist das App Manifest.
Dabei handelt es sich um eine \ac{json}\footnote{Programmiersprachen-unabhängiges Datenformat}-Datei, in der Einzelheiten zur Anwendung und deren Installation angegeben werden \cite{MDNcontributors.b}.
Da es sich dabei, trotz der zusätzlichen nativen Funktionalitäten, um eine Web Applikation handelt, lassen sich \ac{pwa} über eine \ac{url} im Browser aufrufen und sind somit zunächst unabhängig von dem Gerät, auf dem sie aufgerufen werden.
Üblicherweise werden \ac{pwa} als \ac{spa} entwickelt.
Das bedeutet, dass die Anwendung aus einem einzigen HTML-Dokument besteht und Inhalte dynamisch geladen werden.
Ein Vorteil davon ist, dass sich dadurch auch die Anzahl der Anfragen des Clients an den Server verringern, da nicht nach jeder Anfrage die Seite komplett neu angefordert werden muss.
Der Nachteil von \ac{spa} ist, dass im Gegensatz zu klassischen Webanwendungen Funktionalitäten wie Deep-Linking und die Navigation durch die Browser-Steuerelemente eigenständig implementiert werden müssen \cite{Wenzel.2020}.
Bislang gibt es keinen offiziell definierten Web Standard für diese spezielle Art von Webanwendung.

Ein bedeutsames Konzept hinter \acp{pwa} ist das \glqq Progressive Enhancement\grqq{}.
Dieses verlangt, dass \acp{pwa} auf allen Endgeräten grundlegend funktionieren sollen, und schrittweise – falls der Browser und das Gerät dies unterstützt – in ihrer Funktionalität erweitert werden können \cite{Richard.}.
Die Prüfung, ob der Browser die Anforderungen erfüllt, findet durch das Window-Objekt statt, dass das aktuelle Browser Fenster repräsentiert.
Dieses enthält unter anderem das \textit{navigator}-Property, dass Informationen über den Browser besitzt und die Unterstützung der Service Worker \ac{api}\footnote{z.Dt. Programmierschnittstelle.} signalisiert.
Dadurch kann wiederum geprüft werden, ob andere Schnittstellen \zB die \textit{Geolocation}\footnote{Eine Schnittstelle zur Bestimmung und Beobachtung des aktuellen Standorts des Nutzers.} in dem aktuellen Browser unterstützt werden.

%Um eine Übersicht darüber zu erlangen, welche Funktionalitäten durch moderne Webschnittstellen zur Verfügung stehen, bietet sich die Webseite \url{https://whatwebcando.today/} an.
%Dort wird übersichtlich dargestellt, welche konkreten Schnittstellen vom Browser, indem die Webseite aufgerufen wird, unterstützt werden und welche nicht.
%Im Bereich \glqq Native Behaviors\grqq{} fehlt nach Ansicht des Autors beim Aufruf der Seite mit Chrome Browser nur noch die \glqq User Idle Detection\grqq{}.

%Bekannte Bespiele für PWAS? Twitter Lite, Trivago, Forbes siehe https://brainhub.eu/library/pwa-vs-native/
Zur Evaluierung von \ac{pwa} bietet sich \textit{Lighthouse} an, ein vorinstallierte DevTools Erweiterung im Google Chrome Browser.
Dort wird per Mausklick ein Testbericht zur aktuellen Anwendung erstellt, in der unter anderem auch Installierbarkeit und \ac{pwa}-Optimierung geprüft werden.
Dabei orientiert es sich an den, von Web.dev\footnote{Eine von Google Developers unterstützte Webseite mit einer Vielzahl von Artikeln zu Webentwicklungstechnologien.} definierten Kernfunktionalitäten von \ac{pwa}, die lauten: \glqq starts fast, stays fast\grqq , \glqq works in any browser\grqq, \glqq responsive to any screen size\grqq, \glqq provides a custom offline page\grqq, und \glqq is installable\grqq.
Ferner werden noch Kriterien angegeben, die die \ac{pwa} optimal machen, beispielsweise \glqq can be discovered through search\grqq  oder \glqq provides context for permission requests\grqq \cite{Richard.}.

\subparagraph{Service Worker API\\}
Wie bereits erwähnt, ermöglicht der Service Worker Funktionalitäten, die \acp{pwa} zur Konkurrenz von nativen Anwendungen machen.
Dennoch kann die Service Worker \ac{api} grundsätzlich in jeder Anwendung implementiert werden und ist nicht auf \ac{pwa} beschränkt, da es sich bei einem Service Worker um einen Web Worker handelt.
Er fungiert dabei als eine Art Proxy Server, der zwischen der Anwendung, dem Browser und dem Netzwerk platziert ist und somit Zugriff auf Netzwerkanfragen besitzt \cite{MDNcontributors.b}.
Er besitzt seinen eigenen Thread und durch seine Position hat der Service Worker keinen Zugriff auf das \ac{dom}.
Die Voraussetzung für die Nutzung eines Service Workers ist, dass der verwendete Browser diese unterstützt und die Verbindung über \ac{https} läuft \cite{Russell.2021}.
Letzteres wird damit begründet, dass Sicherheitsprobleme wie Man-in-the-middle-Angriffe, die durch die Stellung des Service Workers als Proxy begünstigt werden, vermieden werden können.

Ein Service Worker besitzt die Lifecycle-Events \textit{install}, \textit{activate} und unter anderem das funktionale Event \textit{fetch}.
Diese ermöglichen es, auf bestimmten Ereignissen zur Laufzeit einer Anwendung zu reagieren.
Der Service Worker wird üblicherweise beim ersten Aufrufen der Webseite registriert.
Anschließend ist der Service Worker jederzeit verfügbar und läuft selbstständig im Hintergrund der Anwendung.
Während des \textit{install}-Events sollten diejenigen Dateien in den Cachespeicher aufgenommen werden, die sich im Laufe der Anwendung nicht ändern.
Das betrifft beispielsweise Styling Sheets, das App Manifest und Bild Dateien \cite{MDNcontributors.d}.
Außerdem kann auch die index.html, die als Eintrittspunkt von \acp{spa} dient, im Cache abgelegt werden.\\
Das \textit{active}-Event wird dafür genutzt, veraltete Cachespeicherinhalte zu bereinigen und vorherige Service Worker Registrierungen zu entfernen.\\
Um auf Netzwerkanfragen zu reagieren, gibt es das \textit{fetch}-Event.
Hier ist es möglich, angeforderte Ressourcen ebenfalls im Cache abzulegen.
Dafür gibt es verschiedene Strategien, zwischen denen je nach Anwendungsfall der Applikation abgewägt werden kann.
Gängige Strategien sind der \textit{Cache First}- oder der \textit{Cache then network}-Ansatz \cite{Liebel.2019}.
Durch weitere funktionale Events wie \textit{push}, \textit{notificationclick} und \textit{sync} und die Nutzung von alten und neuen Programmierschnittstellen ermöglicht der Service Worker das moderne, native-ähnliche Web.
Jede dieser \acp{api} sollten ebenfalls im Sinne von \textit{progressive enhancement} eingebunden werden.
Im Laufe dieser Arbeit wird genauer auf die Cache API, die Notification \ac{api}, die Push \ac{api} sowie die Geolocation \ac{api} eingegangen.

Für alle der genannten Programmierschnittstellen ist es nötig, die Erlaubnis des Nutzers zu erfragen.
Zugriff und Verwaltung aller erteilten Erlaubnisse bietet die Permissions \ac{api}.
Diese verfügt über ein Permission Registry, das Permissions für Schnittstellen wie \textit{geolocation}, \textit{bluetooth}, \textit{speaker} und \textit{device-info} enthält.
Laut der W3C\footnote{World Wide Web Consortium, eine Organisation, welche Spezifikationen für das Web veröffentlicht.} Spezifikation der Permissions API gibt es drei Status der Erlaubnis: \textit{granted}, \textit{denied} und \textit{prompt}.
Außerdem wird aufgrund des hohen Einflusses von Permissions unterschieden zwischen Funktionalitäten, die in unsicheren Kontexten und jenen, die nur in sicheren Kontexten (\ac{https}) verwendet werden können \cite{Lamouri.2020}.

Mittlerweile bietet Google, unter anderem zur vereinfachten Implementierung und Verwaltung von Service Workern, das Tool \textit{Workbox} an.
Es handelt sich dabei um eine Bibliothek, die die gängigsten Funktionalitäten von Service Workern zur Verfügung stellt, wodurch wiederkehrende Prozesse eliminiert werden.

\section{React}
React ist eine von Facebook entwickelte, open-source JavaScript-Bibliothek, die seit 2013 publiziert ist.
Sie zeichnet sich dadurch aus, dass sie in erster Linie zum Erstellen von User Interfaces entwickelt wurde.
Durch die ReactDOM-Bibliothek wird die Anwendung um das Rendern dieser Benutzeroberflächen erweitert.
Daran lässt sich auch erklären, warum React im Gegensatz zu Vue oder Angular kein Framework ist.
Werden Projekte mit diesen Frameworks erstellt, erhält der Entwickler eine Vielzahl von eingebauten Werkzeugen zum Entwickeln von skalierbaren, komplexen Webanwendungen.
Im Gegensatz dazu ist React als \ac{ui}-Bibliothek leichtgewichtig und ermöglicht individuelle Erweiterung zur Anpassung an die Anforderungen des Projekts \cite{Barger.2021}.
Dennoch können auch vielschichtige Anwendungen, \zB Facebook oder Paypal mit React umgesetzt werden. %Quelle

\begin{lstlisting}[language=Java,caption={Schlichtes Beispiel der index.js einer React Applikation},captionpos=b,label={lst:basicReact}]
import React from 'react';
import ReactDOM from 'reactdom';

var element = React.createElement(
	'h1',
	{ className: 'greeting},
	'Hello world.'
);
ReactDOM.render(element, document.getElementById('root');
\end{lstlisting}

Die einfachste Möglichkeit React in einem Projekt zu nutzen ist, es über eine \ac{cdn} einzubinden.
Dabei ist es ein Anliegen der Entwickler, dass nur so wenig React genutzt werden kann, wie benötigt.
Ferner ist es möglich React über Package-Manager wie npm in ein Projekt zu importieren oder durch Toolchains\footnote{Eine Sammlung von Werkzeugen, die zum unkomplizierten Aufsetzen eines Produkts dienen.} wie Create-React-App über die Kommandozeile eine \ac{spa} zu erstellen \cite{Facebook.g}.
Im Codeausschnitt \ref{lst:basicReact} ist ein Beispiel zu sehen, wie eine React Anwendung in ihrer kleinsten Form aussehen kann.
Zuerst müssen die Module React und ReactDom importiert werden.
Dann wird per Aufruf der \textit{React.createElement(...)}-Funktion mit den Übergabeparametern HTML-Element, Attribute und Inhalt ein React Element erstellt.
Zuletzt wird in Zeile 9 die \textit{ReactDOM.render(...)}-Funktion genutzt, um das erstellte Element einem anderen Element zuzuordnen und damit eine Hierarchie zu erzeugen.
In diesem Fall konkret dem HTML-Element mit der \textit{id} root.
Die \textit{render}-Funktionen kann als weiteren Übergabeparameter die \textit{Properties} eines Elements oder einer Komponente enthalten, worauf im Laufe des Kapitels genauer eingegangen wird.

Eines der Argumente zur Nutzung eines Programmiergerüsts wie React ist dessen Implementierung des Virtual Document Object Model.
Dieses baut auf dem normalen \ac{dom} auf und ermöglicht es, dass nur diejenigen UI-Elemente neu gerendert werden, deren Daten sich verändert haben.
Des Weiteren bietet sich durch die Abkapselung in Komponenten ein hohes Maß an Wiederverwendbarkeit.
Außerdem ist React wie bereits erwähnt leichtgewichtig, da es sich bei der Hauptbibliothek nur um die Implementierung der wichtigsten Bestandteile handelt.
Weitere Funktionalitäten wie der React Router zur Programmierung von der Navigation in einer SPA oder anderen Bibliotheken können nach Bedarf importiert werden.
Ebenso gibt es \ac{ui}-Bibliotheken wie MaterialUI oder PrimeReact für React, die häufig implementierte Komponenten im modernen Design anbieten.
Generell lassen sich \ac{pwa} jedoch mit jedem Framework oder auch mit einer einfachen Vanilla-JavaScript Implementierung verwirklichen.

Kritik erlangt React vor allem wegen des Vorwurfs, dass es gegen das Entwurfsprinzip der Trennung der Verantwortlichkeiten (Separation of Concerns) verstößt.
Dies wird in der Webentwicklung so umgesetzt, dass verschiedene Technologien wie HTML, CSS und JavaScript jeweils in eigenen Dateien modelliert oder programmiert werden.
Im Gegensatz dazu steht jedoch Reacts Syntax Erweiterung JSX.
Diese ermöglicht die drei genannten Technologien innerhalb von JavaScript zu entwickeln. Ein Beispiel dafür ist in \ref{lst:label} zu sehen.
Wichtig ist hier jedoch, dass die Zeile 8 auch in JavaScript geschrieben werden kann, da es sich hierbei letztendlich um den Aufruf der React.createElement(component, props, …children)-Funktion handelt \cite{Facebook.h}.\\

\begin{lstlisting}[language=Java,caption={Nutzung von JSX},captionpos=b,label={lst:label}]
import React from 'react';
import ReactDOM from 'reactdom';

const Example = (props) =>  {
	const greeting = 'Hello world'
	
	return (
		<h1>{{ greeting }}</h1>
	)	
}
\end{lstlisting}

Außerdem gibt es einige Änderungen, die sich durch diese Art zu programmieren ergeben.
Beispielsweise kann in JSX auf das Semikolon am Ende einer Zeile verzichtet werden und die CSS-Klasse \textit{class} nennt sich \textit{className}.
Letzteres ist eines von mehreren Syntaxänderungen bei JSX.
Dem zugrunde, dass jeder JSX-Code in JavaScript-Code umkompiliert wird.
Das Schlüsselwort \textit{class} ist dabei in JavaScript ein reserviertes Wort für Klassen und nicht für eine CSS-Klasse.
Ein weiteres Beispiel ist \textit{htmlFor} statt \textit{for}. Durch diese Syntax bietet React eine inklusive Dateistruktur.
Die Entwickler begründen das damit, dass es hier im Gegensatz zu anderen JS-Frameworks, in denen es pro Komponente jeweils eine getrennte HTML-, CSS- und JavaScript-Datei gibt, lediglich um eine Trennung der Technologien, nicht aber der Verantwortlichkeiten, handelt.
Diese Syntax hingegen verbinden die Render Logik enger mit den Benutzeroberfläche und führt bei einer korrekten Aufteilung in Komponenten zu einer starken Kohäsion.
Das bietet dem Entwickler mehr Übersichtlichkeit und Verständnis für Zusammengehörigkeit.
Auf der anderen Seite werden komplexe Komponenten jedoch durch diese inklusive Struktur schnell unübersichtlich, weshalb es sinnvoll ist, eine Aufteilung in Unterkomponenten angelehnt an deren Funktionalität vorzunehmen.
Wichtig ist hierbei auch eine organisierte Ordnerstruktur aufrecht zu erhalten, damit die Anwendung wartbar bleibt.

Im Folgenden wird genauer auf einige Grundkonzepte von React eingegangen, wobei React-spezifische Begriffe bewusst nicht übersetzt werden.

\subsection{Komponenten}
Wenn Teile des Codes abgekapselt und wiederverwendet werden sollen, wird eine Komponente erstellt, die meist in einer Datei mit demselben Namen implementiert wird.
React unterscheidet dabei zwischen zustandslosen und klassenbasierten Komponenten.
Ersteres bezeichnete ehemals Komponenten, die nur zur Darstellung von zusammengehörigen UI-Elementen genutzt wird.
Sie sind schlank, wiederverwendbar und leicht zu warten.
Klassenbasierte Komponenten hingegen basieren auf herkömmlichen ES6\footnote{ECMAScript 6, eine 2015 veröffentliche Version von ECMAScript.}-Klassen und bieten sogenannte \text{States}, die lokale Daten einer Komponente verwalten, und einen Lifecycle.
Die Hooks \ac{api} bietet jedoch seit React 16.8 ein neues Konzept an, um States in sogenannten funktionalen Komponenten zu organisieren und somit die Vorteile von zustandslosen und klassenbasieren Komponenten zu vereinen.
Im nächsten Kapitel wird genauer auf die Funktionsweise von \text{Hooks} eingegangen.

Zur Kommunikation und Datenaustausch zwischen Eltern- und Kind-Komponenten werden \textit{Properties} und Callback-Methoden genutzt.
Ein \textit{Property} ist eine Art Übergabeparameter, die von der Eltern- an die Kindkomponente weitergegeben wird.
Das Kind kann mit diesen Daten die eigene \textit{ui} und Funktionalität entwickeln oder wiederum der eigene Kindkomponente geben.
Wichtig ist dabei, dass übergebene Informationen lediglich gelesen, nicht aber verändert werden sollen.
Die Kommunikation nach außen funktioniert über Events.
In der Kindkomponente wird dafür eine Callback-Methode aufgerufen und somit signalisiert, dass die Eltern denjenigen Code ausführen sollen, der als Reaktion auf die Veränderung in der Kindkomponente dient.

\subsection{Hooks}
In Version 16.8 erfolgte die Einführung von \textit{Hooks}.
Diesen bieten die Möglichkeit, \textit{States} und andere React Funktionalitäten zu implementieren, ohne eine JavaScript Klasse deklarieren zu müssen.
Dadurch vereinfachen sich Komponenten, die ehemals von der \textit{Component}-Klasse abgeleitet wurden, um in Konstruktoren Zustände definieren zu können.
Der Rückgabewert dieser funktionalen Komponenten ist die \ac{ui}-Deklaration selbst \cite{Facebook.d}.

Es gibt unterschiedliche Arten von \textit{Hooks}, die gängigsten sind der \textit{useState}- und der \textit{useEffect-Hook}.
Sie werden erstmalig direkt nach dem Rendern der Komponente ausgeführt. Außerdem gibt es die Möglichkeit, eigene \textit{Hooks} zu definieren.

Die \textit{useState-Hook} dient zur Deklaration eines lokalen \textit{States}.
In Zeile 4 des folgenden Beispiels \ref{lst:useState} wird der \textit{State} \textit{counter} in der Komponente Example initialisiert.
Dieser erhält den Standardwert 0 und verfügt über einen Getter -- hier genannt \textit{counter} -- und den Setter, genannt \textit{setCounter()}, über diese Funktion der Zustand geändert werden kann.\\
\begin{lstlisting}[language=Java,caption={Beispiel der Nutzung von useState},captionpos=b,label={lst:useState}]
import React, { useState } from "react";

const Example = (props) =>  {
	const [counter, setCounter] = useState(0);
}
\end{lstlisting}

Der \textit{useEffect-Hook} ersetzt die Lifecycle-Methoden \textit{componentDidUpdate}, \textit{componentDidMount} und \textit{componentWillUnmount} der klassenbasierten Komponenten.
Es bietet sich deshalb an, Ressourcenanfragen hier zu behandeln.
Das Beispiel in \ref{lst:useEffect} zeigt einen einfachen \textit{Effect} welcher die frühere \textit{componentDidMount}-Funktion und \textit{componentWillUnmount()}-Funktion ersetzt.
Der erste Übergabeparameter des \textit{useEffect}-Aufrufs ist eine Funktion, die ausgeführt werden soll und der Zweite ein Array, genannt \textit{dependency array}.
Wenn das Array leer ist, bedeutet das, dass der \textit{Effect} nur einmal nach dem Rendern der Komponente ausgeführt werden soll.
Durch jedes Element, das diesem Array hinzugefügt wird, startet erneut diejenige Funktion, die als erster Übergabeparameter übergeben wurde.\\

\begin{lstlisting}[language=Java,caption={Beispiel für Nutzung der useEffect-Hook},captionpos=b,label={lst:useEffect}]
import React, { useEffect } from "react";

const Example = (props) =>  {
	const [counter, setCounter] = useState(0);

	useEffect(() => {
		console.log('Component did render!);
	}, []);

	useEffect(() => {
		console.log('Counter was updated!);
	}, [counter]);
	
	// setCounter() is called somewhere in the component
}
\end{lstlisting}

Durch das \textit{dependency array} haben \textit{Effects} den Vorteil, dass sie sehr fallspezifisch auf Änderungen der Daten reagieren können und somit umso mehr den dynamischen Gedanken der \ac{spa} realisieren.

\section{React Native}
React Native ist eines der meistgenutzten Frameworks zur Entwicklung von Native Apps \cite{o.V..2021b}.
Es basiert auf React und ist ebenfalls von Facebook entwickelt und veröffentlicht worden.
Bekannte Apps, die auf React Native basieren, sind selbstverständlich die Facebook und Instagram App, aber auch die Unterkunftbuchungsapp Airbnb oder die Lieferdienstapp UberEats \cite{Facebook.f}.

Wie bereits im Kapitel Grundlagen erklärt, werden native Applikationen üblicherweise mit der dafür vorgesehenen Programmiersprache implementiert.
React Native nutzt die Möglichkeit, mit JavaScript die Schnittstellen und \textit{Views} von Native Anwendungen anzusprechen und das Ganze somit als nativen Code zu rendern.
Zur Laufzeit werden dabei durch die \textit{Core Components} von React Native die jeweils korrespondierenden \textit{Native Components} von Android, iOS und anderen Betriebssystemen angesprochen \cite{Facebook.}.
Das wird ermöglicht durch die Architektur von React Native, die in drei Komponenten unterteilt ist: eine Laufzeitumgebung für JavaScript auf der Zielplattform, eine Bridge und ein Native Module.
In der \ref{fig:structure} ist diese Aufteilung abgebildet.

\begin{figure}[h]
 \centering
 \includegraphics[width=1\textwidth]{figures/Aufbau_RN.png}
 \caption{Architektur React Native}
 \quelle{\cite{o.V..o.J.}}
 \label{fig:structure}
\end{figure}

Ersteres bietet in iOS JavaScriptCore und in Android eine Lösung, die von React Native zur Verfügung gestellt wird.
Dabei gibt es in React Native plattformübergreifende Abstraktionen wie \textit{View}, \textit{Image} oder \textit{NetInfo}, die korrespondierende Native Komponenten besitzen.
Die Bridge ist für die Kommunikation zwischen Native Module und JS-Umgebung verantwortlich.
Sie erhält von ersterem Events wie Toucheingaben oder Netzwerkanfragen und vom Native Module Anweisungen für das \ac{ui} oder \acp{api}.
Der Austausch findet dabei asynchron über \ac{json} statt.
Der letzte Teil der Architektur ist das Native Module.
Dies ist die Anwendung, die der Nutzer verwendet \cite{Behrends.2018}.
Es handelt sich somit bei Apps, welche mit React Native programmiert wurden, nicht um hybride Apps, da sie nicht nur in einem Native Container gerendert werden, sondern tatsächlich auf native Schnittstellen zugreifen.
Die Entwicklung solcher Apps ist dennoch plattformunabhängig, da die Implementierung in JavaScript erfolgt und die Umwandlung erst zur Laufzeit geschieht.
React Native Applikationen lassen sich dadurch schwierig in die bereits erklärten Kategorien von mobilen Anwendungen einordnen.%Siehe Seite 4 Behrends

Zur Nutzung von React Native Apps benötigt das Gerät mindestens iOS 11.0 oder Android 5.0 \cite{Facebook.d}.
Genau wie andere Native Apps können sie in den plattform-spezifischen App Store veröffentlicht und dort vom Nutzer heruntergeladen, installiert und aktualisiert werden.
Dabei ist der benötigte Signing-Prozess derselbe wie bei Native Applikationen.

Zur Implementierung von Komponenten und Funktionalitäten in React Native gibt es mehrere Optionen.
Die erste Option ist das Nutzen der bereits erwähnten \textit{Core Components}.
Weiterhin kann auf Community Lösungen zugegriffen werden, die Brücken zu nativen Schnittstellen implementieren.
Sollten die \textit{Core Components} nicht ausreichen, ist das meist die effizienteste Wahl, da viele Funktionalitäten bereits zufriedenstellend und stabil entwickelt und veröffentlicht wurden.
Unter \url{https://reactnative.directory/} sind diese Bibliotheken auffindbar und durch einen errechneten Directory Score nach mehreren Kriterien wie Beliebtheitskurve, Sterne auf GitHub oder Anzahl der Downloads bewertet.
Die letzte Option ist es, Native Modules selbstständig zu programmieren.
Das bedeutet, dass eine \textit{Bridge} zwischen React Native und der nativen Komponete implementiert werden soll, wodurch diese zur Laufzeit mit JavaScript angesprochen werden kann.
Somit ist es generell möglich alles was eine native Anwendung kann, auch in React Native umzusetzen.
 
% Erklärung RN: 2 threads: main thread und js thread. js theard sagt dem th über json, was es tun soll, mt hat ein riesen switch case, was die möglichen anfragen von jst beinhaltet und das dort dann den korrespondierenden java / objective-c code durchführt. theoretisch noch den diffing thread mit shadow dom, der dasselbe macht wie diffing in react. Hilft bei der Performance